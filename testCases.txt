* DequeNode
shouldHaveUpdatedNextIfSetNewNext: comprobar que el next se ha actualizado
shouldHaveUpdatedNextIfSetNewPrevious: comprobar que el prev se ha actualizado
testNewItemSettedIsNotNull: comprobar que el item no es null
testNewItemSettedIsUpdated: comprobar que el item se ha actualizado
isNotATerminalNode: comprobar que un nodo que se encuentra entre dos nodos no es terminal
oneNodeIsATerminalNodeAndFirstNode: comprobar que el un nodo solo isFirst
lastNodeIsIsATerminalNodeAndLastNode: comprobar que el ultimo nodo isLast

* DoubleEndedQueueTest
testNewNodeAppendedIsNotNull: comprobar que los DequeNode que se pasan como argumentos no son nulos
shouldAddOneToSizeAndUpdateReferencesWhenAppending: comprobar que al insertar por la derecha un nodo se añade 1 al size del DoubleEndedQueueList y se actualizan las referencias
shouldAddOneToSizeAndUpdateReferencesWhenAppendingLeft: comprobar que al insertar por la izquierda un nodo se añade 1 al size del DoubleEndedQueueList y se actualizan las referencias
shouldSubtractOneToSizeAndUpdateReferencesWhenDeletingLast: comprobar que al eliminar el último nodo se reduce 1 al size del DoubleEndedQueueList
shouldSubtractOneToSizeAndUpdateReferencesWhenDeletingFirst: comprobar que al eliminar el primer nodo se reduce 1 al size del DoubleEndedQueueList
shouldGetAtPositionOneReturnTheNodeAtPositionOne: comprobar que al usar el método getAt con argumento 1, devuelve el segundo nodo
shouldGetAtPositionZeroReturnTheNodeAtPositionZero: comprobar que al usar el método getAt con argumento 0, devuelve el primer nodo
shouldGetAtNegativePositionThrowAnException: comprobar que se lance una excepción cuando el argumento de getAt sea negativo
shouldGetAtPositionGreaterOrEqualThanSizeThrowAnException: lanza una excepción si el argumento de getAt es mayor que el size de la lista
shouldRaiseExceptionWhenDeletingANodeFromEmptyList: comprobar que no se elimina nada de un DoubleEndedQueueList con size 0
shouldFindANodeThatThereIsInList: Recupera un nodo y luego lo encuentra